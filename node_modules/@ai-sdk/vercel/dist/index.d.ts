import { ProviderV1, LanguageModelV1 } from '@ai-sdk/provider';
import { FetchFunction } from '@ai-sdk/provider-utils';
import { OpenAICompatibleChatSettings } from '@ai-sdk/openai-compatible';
export { OpenAICompatibleErrorData as VercelErrorData } from '@ai-sdk/openai-compatible';

type VercelChatModelId = 'v0-1.0-md' | (string & {});
interface VercelChatSettings extends OpenAICompatibleChatSettings {
}

interface VercelProviderSettings {
    /**
  Vercel API key.
  */
    apiKey?: string;
    /**
  Base URL for the API calls.
  */
    baseURL?: string;
    /**
  Custom headers to include in the requests.
  */
    headers?: Record<string, string>;
    /**
  Custom fetch implementation. You can use it as a middleware to intercept requests,
  or to provide a custom fetch implementation for e.g. testing.
  */
    fetch?: FetchFunction;
}
interface VercelProvider extends ProviderV1 {
    /**
  Creates a model for text generation.
  */
    (modelId: VercelChatModelId, settings?: VercelChatSettings): LanguageModelV1;
    /**
  Creates a chat model for text generation.
  */
    chatModel(modelId: VercelChatModelId, settings?: VercelChatSettings): LanguageModelV1;
    /**
  Creates a language model for text generation.
  */
    languageModel(modelId: VercelChatModelId, settings?: VercelChatSettings): LanguageModelV1;
}
declare function createVercel(options?: VercelProviderSettings): VercelProvider;
declare const vercel: VercelProvider;

export { type VercelProvider, type VercelProviderSettings, createVercel, vercel };
